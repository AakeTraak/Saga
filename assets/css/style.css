/* MAIN
---------------
Import all relevant files
--------------- */
/* VARIABLES
---------------
Setting up the variables. Default fonts, colors, widths and breakpoints.
--------------- */
.animated {
    animation-duration: 1s;

    animation-fill-mode: both;
}

.delay-1 {
    animation-delay: .25s;
}

.delay-2 {
    animation-delay: .5s;
}

.delay-3 {
    animation-delay: .75s;
}

.delay-4 {
    animation-delay: 1s;
}

.delay-5 {
    animation-delay: 1.25s;
}

@keyframes fadeIn {
    0% {
        opacity: 0;
    }
    100% {
        opacity: 1;
    }
}

.fadeIn {
    animation-name: fadeIn;
}

@keyframes fadeInUp {
    0% {
        opacity: 0;
        transform: translate3d(0, 100%, 0);
    }
    100% {
        opacity: 1;
        transform: none;
    }
}

.fadeInUp {
    animation-name: fadeInUp;
}

.hidden {
    display: none;
}

@media (min-width: 1000px) {
    .alignleft, .alignright {
        margin-bottom: 1em;
        padding-bottom: 0;
        width: 300px;
    }
    .alignleft img, .alignright img {
        margin: 0;
    }
    .alignleft {
        float: left;
        margin-right: 2em;
        margin-left: -160px;
    }
    .alignleft q {
        margin: 0;
        width: initial;
        text-align: right;
    }
    blockquote.alignleft {
        padding-right: 20px;
        padding-left: 0;
        border-right: 4px solid #E6E6E6;
        border-left: 0;
        text-align: right;
    }
    q.alignleft {
        margin-top: 0;
        text-align: right;
    }
    .alignright {
        float: right;
        margin-right: -160px;
        margin-left: 2em;
    }
    .alignright q, .alignrightq {
        margin: 0;
        width: initial;
        text-align: left;
    }
    q.alignright {
        margin: 0;
        text-align: left;
    }
}

/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
    line-height: 1.15;
    /* 1 */

    -webkit-text-size-adjust: 100%;
    /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
    margin: 0;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
    margin: .67em 0; 
    font-size: 2em;
}

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
    /* 1 */
    overflow: visible;
    box-sizing: content-box;
    /* 1 */
    height: 0;
    /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
    /* 1 */
    font-size: 1em;
    font-family: monospace, monospace;
    /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
    background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
    border-bottom: none;
    /* 1 */
    text-decoration: underline;
    /* 2 */
    text-decoration: underline dotted;
    /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b, strong {
    font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code, kbd, samp {
    /* 1 */
    font-size: 1em;
    font-family: monospace, monospace;
    /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */
small {
    font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub, sup {
    position: relative;
    vertical-align: baseline; 
    font-size: 75%;
    line-height: 0;
}

sub {
    bottom: -.25em;
}

sup {
    top: -.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
    border-style: none;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button, input, optgroup, select, textarea {
    /* 1 */
    margin: 0;
    /* 1 */
    font-size: 100%;
    font-family: inherit;
    /* 1 */
    line-height: 1.15;
    /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button, input {
    /* 1 */
    overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button, select {
    /* 1 */
    text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button, [type="button"], [type="reset"], [type="submit"] {
    -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner, [type="button"]::-moz-focus-inner, [type="reset"]::-moz-focus-inner, [type="submit"]::-moz-focus-inner {
    padding: 0; 
    border-style: none;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring, [type="button"]:-moz-focusring, [type="reset"]:-moz-focusring, [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
    padding: .35em .75em .625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
    /* 2 */
    display: table;
    box-sizing: border-box;
    /* 1 */
    padding: 0;
    /* 1 */
    max-width: 100%;
    /* 1 */
    color: inherit;
    /* 3 */
    white-space: normal;
    /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
    vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
    overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"], [type="radio"] {
    box-sizing: border-box;
    /* 1 */
    padding: 0;
    /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button, [type="number"]::-webkit-outer-spin-button {
    height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
    /* 1 */
    outline-offset: -2px;

    -webkit-appearance: textfield;
    /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
    /* 1 */
    font: inherit;

    -webkit-appearance: button;
    /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
    display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
    display: list-item;
}

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
    display: none;
}

/**
 * Add the correct display in IE 10.
 */
[hidden] {
    display: none;
}

html {
    max-height: 100%;
    height: 100%;
    font-size: 62.5%;
}

body {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
        flex-direction: column;
    overflow-y: scroll;
    min-height: 100%;
    height: 100%;
    background: #F2F2F2;
    color: rgba(0, 0, 0, .8);
    font-size: 14px;
    font-size: 1.4rem;
    font-family: "Noto Sans", Helvetica, "Helvetica Neue", Arial, sans-serif;
    line-height: 1.8;
}
@media (min-width: 400px) {
    body {
        font-size: 18px;
        font-size: 1.8rem;
    }
}
body main {
    -ms-flex: 1;
        flex: 1;
}

* {
    box-sizing: border-box;
}

h1, h2, h3, h4 {
    margin-top: 30px;
    margin-bottom: 10px;
    font-weight: 500;
    font-family: "Noto Sans", Helvetica, "Helvetica Neue", Arial, sans-serif;
    line-height: 1.2;
}
@media (min-width: 400px) {
    h1, h2, h3, h4 {
        margin-top: 40px;
        margin-bottom: 10px;
    }
}
h1 a, h2 a, h3 a, h4 a {
    border: 0;
}

h1 {
    letter-spacing: -2px;
    font-size: 35px;
    font-size: 3.5rem;
}
@media (min-width: 400px) {
    h1 {
        font-size: 40px;
        font-size: 4rem;
    }
}
@media (min-width: 550px) {
    h1 {
        font-size: 45px;
        font-size: 4.5rem;
    }
}
@media (min-width: 800px) {
    h1 {
        font-size: 50px;
        font-size: 5rem;
    }
}

h2 {
    font-size: 25px;
    font-size: 2.5rem;
}
@media (min-width: 550px) {
    h2 {
        font-size: 30px;
        font-size: 3rem;
    }
}
@media (min-width: 800px) {
    h2 {
        font-size: 35px;
        font-size: 3.5rem;
    }
}

h3 {
    font-size: 20px;
    font-size: 2rem;
}
@media (min-width: 800px) {
    h3 {
        font-size: 25px;
        font-size: 2.5rem;
    }
}

h4 {
    font-weight: 700;
    font-size: 15px;
    font-size: 1.5rem;
}

a {
    color: #000000;
    text-decoration: none;
    transition: all .2s;
}
a:hover {
    border-color: #000000;
    color: #000000;
}

p, blockquote, figure, canvas, iframe, form {
    margin-right: 0;
    margin-bottom: 20px;
    margin-left: 0;
}

.note {
    padding: 10px;
    background: #E6E6E6;
}

mark {
    padding: 2px;
    background-color: #FDFFB6;
    box-shadow: #FDFFB6 0 0 5px;
}

sup {
    vertical-align: super;
    font-size: 13px;
    font-size: 1.3rem;
}

blockquote {
    padding-left: 20px;
    border-left: 4px solid #E6E6E6;
    font-family: "Noto Serif", serif;
}
blockquote img {
    margin: 20px 0 !important;
    width: 100% !important;
}

q {
    display: block;
    text-align: center;
    font-style: italic;
    font-size: 125%;
    font-family: "Noto Serif", serif;
}
@media (min-width: 550px) {
    q {
        margin-top: 40px;
        margin-bottom: 40px;
        margin-left: auto;
        margin-left: calc(0% - 20px);
        max-width: 100%;
        max-width: calc(100% + 40px);
        width: 100%;
        width: calc(100% + 40px);
    }
}
q:before, q:after {
    display: none;
}

cite {
    display: block;
    color: #CCCCCC;
    text-transform: capitalize;
    font-style: normal;
    font-size: 14px;
    font-size: 1.4rem;
    font-family: "Noto Sans", Helvetica, "Helvetica Neue", Arial, sans-serif;
}
cite a {
    border: none;
    color: inherit;
}
cite:before {
    content: "\2014 \2009";
}

ul, ol {
    margin-top: 10px;
    margin-bottom: 20px;
    margin-left: 20px;
    padding: 0;
}
ul li, ol li {
    margin: 0;
}

ul {
    list-style: square;
}
ul ul, ul ol {
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 20px;
}

ol {
    list-style: decimal;
}
ol ul, ol ol {
    margin-top: 0;
    margin-bottom: 0;
    margin-left: 20px;
}

em {
    font-style: italic;
}

strong {
    font-weight: bold;
}

code {
    padding: 3px 6px;
    background: #F1F1F1;
    color: #000000;
    font-size: 15px;
    font-size: 1.5rem;
    font-family: "Inconsolata", Consolas, "Droid Sans Mono", "Courier New";
}

pre {
    margin-top: 30px;
    margin-right: 20px;
    margin-bottom: 10px;
    margin-left: 20px;
    word-wrap: break-word;
}
pre code {
    padding: 0;
    background: none;
    font-size: 15px;
    font-size: 1.5rem;
    font-family: "Inconsolata", Consolas, "Droid Sans Mono", "Courier New";
}

hr {
    height: 4px;
    border: 0;
    background: #E6E6E6;
}

#footer {
    background: #252525;
    color: #999999;
    text-transform: uppercase;
    font-size: 12px;
    font-size: 1.2rem;
    animation-delay: 1s;
}
#footer .colophon {
    padding: 50px 20px;
}
#footer .colophon section {
    margin: 0 auto;
    max-width: 600px;
}
#footer .colophon section:first-child {
    margin-top: 0;
}
#footer .colophon section:last-child {
    margin-bottom: 0;
}
#footer .colophon section .ghost-logo {
    display: inline-block;
    margin-left: 5px;
    width: 4.2em;
    height: 1.3em;
    background: #989898;
    vertical-align: text-bottom;
    transition: .2s all ease;

    -webkit-mask-image: url(../images/ghost-logo.svg);
            mask-image: url(../images/ghost-logo.svg);
    -webkit-mask-size: contain;
            mask-size: contain;
    -webkit-mask-repeat: no-repeat;
            mask-repeat: no-repeat;
}
#footer .colophon section .ghost-logo:hover {
    background-color: white;
}
#footer .bottom {
    padding: 20px 20px;
    background: #1A1919;
}
#footer .bottom section {
    margin: 0 auto;
    max-width: 600px;
}
#footer .bottom section a {
    color: #999999;
}
#footer .bottom section a:hover {
    color: #FFFFFF;
}
#footer .bottom section a i.fa.fa-heart {
    color: #D85151;
}
#footer a {
    border-color: rgba(255, 255, 255, 0);
    color: #FFFFFF;
}
#footer a:hover {
    border-color: #FFFFFF;
}
#footer .heart {
    display: inline-block;
    width: 1.3em;
    height: 1.3em;
    background: #FF4D4C;
    vertical-align: text-bottom;

    -webkit-mask-image: url(../images/heart.svg);
            mask-image: url(../images/heart.svg);
    -webkit-mask-size: contain;
            mask-size: contain;
    -webkit-mask-repeat: no-repeat;
            mask-repeat: no-repeat;
}

.feed.grid {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
        flex-direction: column;
}
@media (min-width: 800px) {
    @supports (display: grid) {
        .feed.grid {
            display: -ms-grid;
            display:     grid;

            grid-gap: 20px;
            -ms-grid-columns: (minmax(500px, 1fr))[auto-fit];
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            grid-auto-flow: dense;
        }
        .feed.grid .post {
            margin-bottom: 0;
        }
        .feed.grid .post.tag-hash-tall {
            min-height: 50vh;
        }
        .feed.grid .post.featured {
            -ms-grid-column: span 2;
                grid-column: span 2;
        }
        .feed.grid .post.tag-hash-tall {
            -ms-grid-row-span: 2;
            grid-row-end: span 2;
        }
    }
    @supports not (display: grid) {
        .feed.grid {
            display: -ms-flexbox;
            display: flex;
            -ms-flex-direction: row;
                flex-direction: row;

            -ms-flex-wrap: wrap;
                flex-wrap: wrap;
        }
        .feed.grid .post {
            width: calc(50% - 10px);
        }
        .feed.grid .post:nth-of-type(2n) {
            margin-left: 20px;
        }
    }
}

.header {
    background: black;
    color: rgba(255, 255, 255, .7);
}
.header a {
    color: white;
}
.header.home {
    background: white;
    color: rgba(0, 0, 0, .7);
}
.header.home a {
    color: black;
}
.header.cover-image {
    position: relative;
    background: black;
    background-position: center;
    background-size: cover;
    color: rgba(255, 255, 255, .7);
    color: white;
}
.header.cover-image a {
    color: white;
}
.header.cover-image:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, .7);
}
.header .header--top {
    position: relative;
    z-index: 10;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: row;
        flex-direction: row;
    -ms-flex-pack: justify;
    overflow: hidden;
    max-height: 60px;
    font-size: 14px;
    font-size: 1.4rem;
    line-height: 60px;

    justify-content: space-between;
}
.header .header--top a.blog-title {
    float: left;
    padding-left: 20px;
    height: 60px;
    font-weight: 600;
}
.header .header--top a.blog-title img.blog-logo {
    margin: 15px 0;
    padding: 0;
    width: auto;
    height: 30px;
}
.header .header--top .blog-description {
    display: none;
    margin-left: 5px;
}
@media (min-width: 550px) {
    .header .header--top .blog-description {
        display: inline;
    }
}
.header .header--top nav.blog-navigation {
    float: right;
}
.header .header--top nav.blog-navigation ul.nav {
    margin: 0;
}
.header .header--top nav.blog-navigation ul.nav li {
    display: inline-block;
}
.header .hero {
    position: relative;
    z-index: 10;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
        flex-direction: column;
    max-height: calc(100vh - 60px);
    height: 400px;
}
@media (min-width: 400px) {
    .header .hero {
        height: 500px;
    }
}
@media (min-width: 550px) {
    .header .hero {
        height: 600px;
    }
}
@media (min-width: 800px) {
    .header .hero {
        height: 700px;
    }
}
@media (min-width: 1000px) {
    .header .hero {
        height: 700px;
    }
}
.header .hero .hero-content {
    margin: auto;
    max-width: 600px;
    width: calc(100% - 40px);
    color: rgba(255, 255, 255, .7);
}
.header .hero .hero-content p {
    margin-top: 1rem;
    margin-bottom: 1rem;
}
.header .hero .hero-content h1 {
    margin-top: 0;
    color: white;
}
.header .hero .hero-content h1 img {
    max-width: 400px;
    width: 100%;
}
.header .hero .hero-content a {
    color: rgba(255, 255, 255, .7);
    text-decoration: dotted;
}
.header .hero .hero-content a:hover {
    color: white;
}
.header .hero .hero-content .post--tags {
    display: block;
    overflow: auto;
    margin-top: 2rem;
    width: 100%;
    font-size: 12px;
    font-size: 1.2rem;
}
.header .hero .hero-content .post--tags a {
    display: inline-block;
    float: left;
    margin-right: 3px;
    margin-bottom: 3px;
    padding: 6px;
    border: 1px solid rgba(255, 255, 255, .6);
    background: transparent;
    color: rgba(255, 255, 255, .6);
    text-transform: uppercase;
    line-height: 1;
}
.header .hero .hero-content .post--tags a:hover {
    background: white;
    color: black !important;
}

.author-template .hero {
    text-align: center;
}
.author-template .hero .author-image {
    margin-bottom: 30px; 
    width: 100px;
    height: auto;
    border-radius: 50%;
}
@media (min-width: 400px) {
    .author-template .hero .author-image {
        width: 150px;
    }
}
@media (min-width: 550px) {
    .author-template .hero .author-image {
        width: 175px;
    }
}
.author-template .hero .author-data span {
    display: block;
    margin-bottom: 10px;
}

.page-template .main {
    padding: 10px 20px;
    background: #FFFFFF;
}
@media (min-width: 800px) {
    .page-template .main {
        padding: 30px 20px;
    }
}
@media (min-width: 1000px) {
    .page-template .main {
        padding: 40px 20px;
    }
}
.page-template .main .page {
    margin: 0 auto;
    max-width: 600px;
}
.page-template .main .page .content > *:first-child {
    margin-top: 0;
}
.page-template .main .page .content > *:last-child {
    margin-bottom: 0;
}

.post-template .main {
    padding: 10px 20px;
    background: #FFFFFF;
}
@media (min-width: 800px) {
    .post-template .main {
        padding: 30px 20px;
    }
}
@media (min-width: 1000px) {
    .post-template .main {
        padding: 40px 20px;
    }
}
.post-template .main .post {
    margin: 0 auto;
    max-width: 600px;
}
.post-template .main .post .content > *:first-child {
    margin-top: 0;
}
.post-template .main .post .content > *:last-child {
    margin-bottom: 0;
}

.tag-template .main {
    background: #FFFFFF;
}
.tag-template .main .tag {
    margin: 0 auto;
    max-width: 600px;
}
.tag-template .main .tag .tag-content > *:first-child {
    margin-top: 0;
}
.tag-template .main .tag .tag-content > *:last-child {
    margin-bottom: 0;
}

.header .header--top nav.blog-navigation {
    float: right;
}
.header .header--top nav.blog-navigation ul {
    margin: 0;
    margin-right: 10px;
}
.header .header--top nav.blog-navigation ul li {
    display: inline-block;
    margin-right: 10px;
    font-size: 14px;
    line-height: 60px;
}
.header .header--top nav.blog-navigation ul li[class$="icon"] {
    margin-right: 5px;
}
.header .header--top nav.blog-navigation ul li[class$="icon"] .label {
    display: none;
}
.header .header--top nav.blog-navigation ul li[class$="icon"] a:before {
    content: "";
    display: inline-block;
    margin-top: -5px;
    width: 25px;
    height: 25px;
    background-color: gray;
    background-size: contain;
    vertical-align: middle;

    -webkit-mask-size: contain;
            mask-size: contain;
}
.header .header--top nav.blog-navigation ul li[class$="icon"] a:hover:before {
    background-color: black;
}
.header .header--top nav.blog-navigation ul li.nav-githubicon a:before {
    -webkit-mask-image: url(../images/github.svg);
            mask-image: url(../images/github.svg);
}
.header .header--top nav.blog-navigation ul li.nav-twittericon a:before {
    -webkit-mask-image: url(../images/twitter.svg);
            mask-image: url(../images/twitter.svg);
}
.header .header--top nav.blog-navigation ul li.nav-rssicon a:before {
    -webkit-mask-image: url(../images/rss.svg);
            mask-image: url(../images/rss.svg);
}
.header .header--top nav.blog-navigation ul li.nav-facebookicon a:before {
    -webkit-mask-image: url(../images/facebook.svg);
            mask-image: url(../images/facebook.svg);
}
.header .header--top nav.blog-navigation ul li.nav-downloadicon a:before {
    -webkit-mask-image: url(../images/download.svg);
            mask-image: url(../images/download.svg);
}
.header .header--top nav.blog-navigation ul li.nav-imageicon a:before {
    -webkit-mask-image: url(../images/image.svg);
            mask-image: url(../images/image.svg);
}
.header .header--top nav.blog-navigation ul li.nav-tumblricon a:before {
    -webkit-mask-image: url(../images/tumblr.svg);
            mask-image: url(../images/tumblr.svg);
}
.header .header--top nav.blog-navigation ul li.nav-steamicon a:before {
    -webkit-mask-image: url(../images/steam.svg);
            mask-image: url(../images/steam.svg);
}
.header .header--top nav.blog-navigation ul li.nav-googleplusicon a:before {
    -webkit-mask-image: url(../images/google-plus.svg);
            mask-image: url(../images/google-plus.svg);
}
.header .header--top nav.blog-navigation ul li.nav-cameraicon a:before {
    -webkit-mask-image: url(../images/camera.svg);
            mask-image: url(../images/camera.svg);
}
.header .header--top nav.blog-navigation ul li:last-of-type {
    margin-right: 10px;
}

.header.cover-image .header--top nav.blog-navigation ul li[class$="icon"] a:before {
    background-color: white;
}

.content a {
    color: #000000;
    text-decoration: underline;
    transition: all .2s;
}
.content a:hover {
    border-color: #000000;
    color: #000000;
}

.content .gallery {
    margin-left: -5px;
    padding: 5px;
    width: 100%;
}
.content .gallery a {
    border: 0;
}
.content .gallery a:hover {
    border-color: transparent;
}
.content .gallery img {
    margin: auto;
    width: auto;
    height: auto;
}

.content img {
    display: block;
    margin-left: auto;
    margin-left: calc(0% - 20px);
    width: 100%;
    width: calc(100% + 40px);
    height: auto;
}

.content figure.kg-image-card {
    position: relative;
    right: 50%;
    left: 50%;
    margin-right: -50vw;
    margin-bottom: 20px;
    margin-left: -50vw;
    width: 100vw;
}
@media (min-width: 550px) {
    .content figure.kg-image-card {
        margin-bottom: 40px;
    }
}
.content figure.kg-image-card img.kg-image {
    margin: 0 auto;
    max-width: calc(100vw - 40px);
    width: initial;
}
@media (min-width: 550px) {
    .content figure.kg-image-card img.kg-image {
        max-width: 680px;
    }
}
.content figure.kg-image-card img.kg-image.kg-image-wide {
    max-width: 100vw;
}
@media (min-width: 800px) {
    .content figure.kg-image-card img.kg-image.kg-image-wide {
        max-width: 800px;
    }
}
@media (min-width: 1000px) {
    .content figure.kg-image-card img.kg-image.kg-image-wide {
        max-width: 1000px;
    }
}
@media (min-width: 1400px) {
    .content figure.kg-image-card img.kg-image.kg-image-wide {
        max-width: 1200px;
    }
}
.content figure.kg-image-card img.kg-image.kg-image-full {
    max-width: 100vw;
    width: 100vw;
}
.content figure.kg-image-card figcaption {
    text-align: center;
    font-size: 14px;
    line-height: 50px;
}

.feed .post {
    position: relative;
    overflow: hidden;
    margin-bottom: 20px;
    padding: 20px;
    background-color: #585858;
    background-position: center;
    background-size: cover;
    color: white;
}
@media (min-width: 550px) {
    .feed .post {
        padding: 30px; 
        min-height: 25vh;
    }
}
.feed .post a {
    color: inherit;
}
.feed .post.has-image:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    z-index: 10;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, .8);
}
@media (min-width: 550px) {
    .feed .post.has-image:after {
        background: rgba(0, 0, 0, .7);
    }
}
.feed .post .post--top-content, .feed .post .post--bottom-content {
    position: relative;
    z-index: 20;
    max-width: 800px;
}
@media (min-width: 550px) {
    .feed .post .post--top-content {
        margin-bottom: 30px;
    }
}
.feed .post .post--tags {
    display: block;
    overflow: auto;
    margin-bottom: 15px;
    width: 100%;
    font-size: 12px;
    font-size: 1.2rem;
}
.feed .post .post--tags a {
    display: inline-block;
    float: left;
    margin-right: 3px;
    margin-bottom: 3px;
    padding: 6px;
    border: 1px solid rgba(255, 255, 255, .6);
    background: transparent;
    color: rgba(255, 255, 255, .6);
    text-transform: uppercase;
    line-height: 1;
}
.feed .post .post--tags a:hover {
    background: white;
    color: #202020 !important;
}
@media (min-width: 550px) {
    .feed .post .post--tags a:not(:nth-of-type(1)) {
        opacity: 0;
    }
}
.feed .post .post--tags:hover a {
    border-color: white;
    color: white;
}
.feed .post .post--tags:hover a:not(:nth-of-type(1)) {
    display: inline-block;
}
.feed .post:hover .post--tags a:not(:nth-of-type(1)) {
    opacity: 1;
}
.feed .post .post--title {
    margin: 0;
}
.feed .post .post--title a {
    font-size: inherit;
}
.feed .post .post--excerpt {
    margin: 15px 0;
    max-width: 550px;
    color: rgba(255, 255, 255, .6);
    font-size: 14px;
    font-size: 1.4rem;
}
.feed .post .post--read-time {
    margin-bottom: 1em; 
    color: rgba(255, 255, 255, .6);
    font-size: 14px;
    font-size: 1.4rem;
}
.feed .post .post--meta {
    display: block;
    color: rgba(255, 255, 255, .6);
    font-size: 14px;
    font-size: 1.4rem;
}
.feed .post .post--meta .author {
    color: white;
}
.feed .post .post--meta .author a {
    border-color: transparent;
}
.feed .post .post--meta .author a:hover {
    border-color: white;
}
@media (min-width: 550px) {
    .feed .post .post--bottom-content {
        position: absolute;
        right: 20px;
        bottom: 16px;
        left: 20px;
    }
}
@media (min-width: 550px) {
    .feed .post .post--bottom-content {
        right: 30px;
        bottom: 24px;
        left: 30px;
    }
}

.feed {
    padding: 20px;
    padding-bottom: 0;
}

nav.pagination {
    text-align: center;
    line-height: 60px;
}
nav.pagination .newer-posts, nav.pagination .older-posts {
    color: black;
}
nav.pagination .page-number {
    margin: 0 20px;
    color: gray;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
